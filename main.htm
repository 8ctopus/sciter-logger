<html
    window-resizable="true"
    window-width="600dip"
    window-height="800dip"
>
<head>
<title>sciter logger demo</title>
<style>

body {
    border-spacing: 1em;
}

iframe {
    width: *;
    height: 42dip;

    border: 1dip solid rgb(230,230,230);
}

plaintext#logger {
    size: *;
}

@import url(src/logger.css);

</style>
<script type="module">

import * as sciter from "@sciter";
import Logger from "src/logger.js";
import * as Utils from "node_modules/sciter-utils/src/utils.js";

let init = false;

document.on("ready", function() {
    // add support for F5 reload
    Utils.addReloadWindow();

    // close window on escape key press
    Utils.closeWindowOnEscape(Window.this);

    // center window on screen
    Utils.centerWindow(Window.this, "screen");

    // bring window to front and set input focus
    if (Window.this.activate(true))
        console.log("Activate window - OK");
    else
        console.error("Activate window - FAILED");

    // initialize logger
    console.log("logger init...");

    Logger.init({
        url: __DIR__ + "%DATE%.log",
        clear: true,
    });

    console.log("logger init - OK");

    // redirect logger output to plaintext
    Logger.plaintext(document.$("plaintext#logger"));

    console.log("logger attach...");

    // attach logger to console
    Logger.attach();

    console.debug("logger attach - OK");

    // capture unhandled exceptions
    Logger.capture(unhandledExceptionHandler);

    // log logger debug info
    Logger.debug();

    // log sciter version
    console.debug(Utils.sciterInfo());

    // initialization complete, app will no longer close on exception
    init = true;

    console.line();

    // test basic logger methods
    console.debug("debug");
    console.log("log");
    console.note("note");
    console.warn("warning");
    console.error("error");
    console.exception("exception");

    console.line();

    // test multiple arguments
    console.log("a", "b", "c", "d");
    console.log("string", 1, [1, 3, 4], {a: 1, b: 2});

    console.line();

    // test true/false
    console.debug(true, false);

    // test log json object
    let a = {
        a: 1,
        b: {
            alpha: "test",
            beta: "yet another test",
        },
        c: 3,
    };

    console.debug(a);

    // test log array
    a = [4, 3, 2, 1];

    console.debug(a);

    // test log map
    a = new Map([
        [1, "one"],
        [2, "two"],
        [3, "three"],
    ]);

    console.debug(a);

    console.line();

    // test date logging
    a = new Date();

    console.debug(a);

    // test array buffer logging
    console.debug(sciter.encode("abcde"));

    try {
        // test handled exception
        throw new Error("main handled exception");
    }
    catch (error) {
        console.exception(error);
    }

    // test unhandled exception
    throw new Error("main unhandled exception");
});

/**
 * Unhandled exception handler
 * @param {Error|string} exception
 */
function unhandledExceptionHandler(exception) {
    // log exception using exception if it exists, error otherwise
    typeof console.exception === "function" ? console.exception(exception) : console.error(exception);

    // check if app has passed init point
    if (init)
        return;

    console.log("Application must close...");

    // flush io queue so the log is written
    Utils.flushIOQueue();

    // close app (can still be stopped in closerequest event)
    Window.this.close();
}

document.on("click", "button#window", function() {
    console.log("create new window...");

    new Window({
        parent: Window.this,
        url: __DIR__ + "window.htm",
        state: Window.WINDOW_SHOWN,
        alignment: 6,
        width: 300,
        height: 200,
    });
});

</script>
<script type="module">

import Logger from "src/logger.js";
import {test} from "js/test.js";

// logger not attached to console yet as it happens in document ready
console.log(`main logger attached to console - ${Logger.isAttached()}`);

document.on("click", "button#module", function() {
    // logger attached because document ready is complete
    console.log(`main attached to console - ${Logger.isAttached()}`);

    test();
});

</script>
</head>
<body>
    <button #window>test logger in new window</button>
    <button #module>test logger in new module</button>
    <iframe src="iframe.htm" />
    <plaintext #logger readonly />
</body>
</html>
